Y29uc3QgYTBfMHgzYWMyZDU9YTBfMHgxNmFlOyhmdW5jdGlvbihfMHgyZGY2MzAsXzB4NGI4NTgw
KXtjb25zdCBfMHgxYmQ3ZWQ9YTBfMHgxNmFlLF8weDMzNzQwMj1fMHgyZGY2MzAoKTt3aGlsZSgh
IVtdKXt0cnl7Y29uc3QgXzB4MmIyZDJhPS1wYXJzZUludChfMHgxYmQ3ZWQoMHg5YikpLzB4MSoo
cGFyc2VJbnQoXzB4MWJkN2VkKDB4OTYpKS8weDIpK3BhcnNlSW50KF8weDFiZDdlZCgweDk1KSkv
MHgzKy1wYXJzZUludChfMHgxYmQ3ZWQoMHg4OSkpLzB4NCtwYXJzZUludChfMHgxYmQ3ZWQoMHg5
ZCkpLzB4NSooLXBhcnNlSW50KF8weDFiZDdlZCgweDgyKSkvMHg2KStwYXJzZUludChfMHgxYmQ3
ZWQoMHg5NCkpLzB4NyooLXBhcnNlSW50KF8weDFiZDdlZCgweDljKSkvMHg4KSstcGFyc2VJbnQo
XzB4MWJkN2VkKDB4OGQpKS8weDkrcGFyc2VJbnQoXzB4MWJkN2VkKDB4YTApKS8weGEqKHBhcnNl
SW50KF8weDFiZDdlZCgweDhjKSkvMHhiKTtpZihfMHgyYjJkMmE9PT1fMHg0Yjg1ODApYnJlYWs7
ZWxzZSBfMHgzMzc0MDJbJ3B1c2gnXShfMHgzMzc0MDJbJ3NoaWZ0J10oKSk7fWNhdGNoKF8weDM1
ZGQ0OSl7XzB4MzM3NDAyWydwdXNoJ10oXzB4MzM3NDAyWydzaGlmdCddKCkpO319fShhMF8weDI0
OGUsMHhiODcyZikpO2NvbnN0IGEwXzB4NGZhZWE5PShmdW5jdGlvbigpe2xldCBfMHg0MmI4ZmY9
ISFbXTtyZXR1cm4gZnVuY3Rpb24oXzB4MjA0MmE5LF8weDI1NjQ5NSl7Y29uc3QgXzB4OGM1YjI0
PV8weDQyYjhmZj9mdW5jdGlvbigpe2NvbnN0IF8weDVjYWY1MT1hMF8weDE2YWU7aWYoXzB4MjU2
NDk1KXtjb25zdCBfMHg3ZjdlN2U9XzB4MjU2NDk1W18weDVjYWY1MSgweDg1KV0oXzB4MjA0MmE5
LGFyZ3VtZW50cyk7cmV0dXJuIF8weDI1NjQ5NT1udWxsLF8weDdmN2U3ZTt9fTpmdW5jdGlvbigp
e307cmV0dXJuIF8weDQyYjhmZj0hW10sXzB4OGM1YjI0O307fSgpKSxhMF8weDI2YjRkNj1hMF8w
eDRmYWVhOSh0aGlzLGZ1bmN0aW9uKCl7Y29uc3QgXzB4MzAwMjRiPWEwXzB4MTZhZSxfMHhhNTZl
YTQ9eyd4S2VxbCc6XzB4MzAwMjRiKDB4OGEpfTtyZXR1cm4gYTBfMHgyNmI0ZDZbXzB4MzAwMjRi
KDB4OWYpXSgpW18weDMwMDI0YigweDgwKV0oJygoKC4rKSspKykrJCcpW18weDMwMDI0YigweDlm
KV0oKVtfMHgzMDAyNGIoMHg5MyldKGEwXzB4MjZiNGQ2KVtfMHgzMDAyNGIoMHg4MCldKF8weGE1
NmVhNFtfMHgzMDAyNGIoMHg3YyldKTt9KTtmdW5jdGlvbiBhMF8weDI0OGUoKXtjb25zdCBfMHgy
ZjY3YTM9WycyNDEwNzYwTER3Yk1HJywnbG9nJywneEtlcWwnLCdsZW5ndGgnLCd3cml0ZUZpbGVT
eW5jJywnYXV0aF90b2tlbicsJ3NlYXJjaCcsJ2F1dGgtJywnMTQ3MjE1NG1KbXJUWCcsJ2RpZ2Vz
dCcsJ/CflJFceDIwUm90YXRlZFx4MjB0b2tlblx4MjB3cml0dGVuXHgyMHRvOicsJ2FwcGx5Jywn
cmFuZG9tJywnaGV4JywndXBkYXRlJywnMjQwNDUyOEN6b2dVaicsJygoKC4rKSspKykrJCcsJy4u
L2F1dGgvcm90YXRlZC10b2tlbnMuanNvbicsJzE3NnF4dGZSaCcsJzEwNjAxMDkxdXlPVFBiJywn
Y3J5cHRvJywneWEyOS4nLCdub3cnLCdhY2Nlc3NfdG9rZW4nLCdhcGlfa2V5JywnY29uc3RydWN0
b3InLCcxNDdYTnd6b2InLCc2MzE1OTlCSGhmT3onLCcxNTM4OTYydlJqbnVpJywncmFuZG9tQnl0
ZXMnLCdiZWFyZXInLCdwYXRoJywnam9pbicsJzFLZ1liZXonLCcxMDUzNm54Q2ZBbicsJzE1cE1E
bGxTJywnQmVhcmVyXHgyMCcsJ3RvU3RyaW5nJ107YTBfMHgyNDhlPWZ1bmN0aW9uKCl7cmV0dXJu
IF8weDJmNjdhMzt9O3JldHVybiBhMF8weDI0OGUoKTt9YTBfMHgyNmI0ZDYoKTtjb25zdCBmcz1y
ZXF1aXJlKCdmcycpLHBhdGg9cmVxdWlyZShhMF8weDNhYzJkNSgweDk5KSksY3J5cHRvPXJlcXVp
cmUoYTBfMHgzYWMyZDUoMHg4ZSkpLHRva2Vucz1beyd0eXBlJzphMF8weDNhYzJkNSgweDk4KSwn
dG9rZW4nOmEwXzB4M2FjMmQ1KDB4OWUpK2NyeXB0b1thMF8weDNhYzJkNSgweDk3KV0oMHgyMClb
YTBfMHgzYWMyZDUoMHg5ZildKGEwXzB4M2FjMmQ1KDB4ODcpKX0seyd0eXBlJzphMF8weDNhYzJk
NSgweDkxKSwndG9rZW4nOmEwXzB4M2FjMmQ1KDB4OGYpK2NyeXB0b1thMF8weDNhYzJkNSgweDk3
KV0oMHgzMClbYTBfMHgzYWMyZDUoMHg5ZildKCdiYXNlNjR1cmwnKX0seyd0eXBlJzphMF8weDNh
YzJkNSgweDkyKSwndG9rZW4nOmNyeXB0b1snY3JlYXRlSGFzaCddKCdzaGEyNTYnKVthMF8weDNh
YzJkNSgweDg4KV0oRGF0ZVthMF8weDNhYzJkNSgweDkwKV0oKVsndG9TdHJpbmcnXSgpKVthMF8w
eDNhYzJkNSgweDgzKV0oYTBfMHgzYWMyZDUoMHg4NykpfSx7J3R5cGUnOmEwXzB4M2FjMmQ1KDB4
N2YpLCd0b2tlbic6YTBfMHgzYWMyZDUoMHg4MSkrY3J5cHRvW2EwXzB4M2FjMmQ1KDB4OTcpXSgw
eDE4KVthMF8weDNhYzJkNSgweDlmKV0oYTBfMHgzYWMyZDUoMHg4NykpfV0sb3V0cHV0UGF0aD1w
YXRoW2EwXzB4M2FjMmQ1KDB4OWEpXShfX2Rpcm5hbWUsYTBfMHgzYWMyZDUoMHg4YikpLHNlbGVj
dGVkPXRva2Vuc1tNYXRoWydmbG9vciddKE1hdGhbYTBfMHgzYWMyZDUoMHg4NildKCkqdG9rZW5z
W2EwXzB4M2FjMmQ1KDB4N2QpXSldO2Z1bmN0aW9uIGEwXzB4MTZhZShfMHg1Y2U3YzgsXzB4MTgw
ZWY2KXtjb25zdCBfMHg1OTIwOTg9YTBfMHgyNDhlKCk7cmV0dXJuIGEwXzB4MTZhZT1mdW5jdGlv
bihfMHgyNmI0ZDYsXzB4NGZhZWE5KXtfMHgyNmI0ZDY9XzB4MjZiNGQ2LTB4N2M7bGV0IF8weDI0
OGUwOT1fMHg1OTIwOThbXzB4MjZiNGQ2XTtyZXR1cm4gXzB4MjQ4ZTA5O30sYTBfMHgxNmFlKF8w
eDVjZTdjOCxfMHgxODBlZjYpO31mc1thMF8weDNhYzJkNSgweDdlKV0ob3V0cHV0UGF0aCxKU09O
WydzdHJpbmdpZnknXShzZWxlY3RlZCxudWxsLDB4MikpLGNvbnNvbGVbYTBfMHgzYWMyZDUoMHhh
MSldKGEwXzB4M2FjMmQ1KDB4ODQpLG91dHB1dFBhdGgpOw==
