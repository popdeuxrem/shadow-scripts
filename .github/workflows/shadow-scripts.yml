# 🛠️ Shadow Scripts CI/CD Pipeline
name: 🛠️ Build, Test & Deploy — Shadow Scripts

# ──────────────────────────────────────────────────────────────────────────────
# Workflow Triggers
# ──────────────────────────────────────────────────────────────────────────────
on:
  push:
    branches:
      - main
    paths:
      - 'src-scripts/**'
      - 'scripts/**'
      - 'configs/master-rules.yaml'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/shadow-scripts.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src-scripts/**'
      - 'scripts/**'
      - 'configs/master-rules.yaml'
      - 'package.json'
      - 'pnpm-lock.yaml'
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force full rebuild'
        type: boolean
        default: false
      environment:
        description: 'Deployment environment'
        type: choice
        options:
          - production
          - staging
        default: production
      debug_mode:
        description: 'Verbose build output'
        type: boolean
        default: false

# ──────────────────────────────────────────────────────────────────────────────
# Concurrency
# ──────────────────────────────────────────────────────────────────────────────
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ──────────────────────────────────────────────────────────────────────────────
# Global Environment
# ──────────────────────────────────────────────────────────────────────────────
env:
  DNS_SERVER: "1.1.1.1"
  NODE_OPTIONS: "--max-old-space-size=4096"
  PNPM_VERSION: "9.7.0"
  CACHE_TTL_DAYS: "7"
  LOG_LEVEL: ${{ inputs.debug_mode && 'debug' || 'info' }}

# ──────────────────────────────────────────────────────────────────────────────
# Job: Security Scan
# ──────────────────────────────────────────────────────────────────────────────
jobs:
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { 'node-version': '22' }
      - uses: github/codeql-action/init@v3
        with: { languages: javascript }
      - uses: github/codeql-action/analyze@v3
      - name: Write security summary
        run: |
          {
            echo "### 🔒 Security Scan Results"
            echo "* CodeQL: completed"
            echo "* Timestamp: $(date -u)"
          } >> $GITHUB_STEP_SUMMARY

  # ────────────────────────────────────────────────────────────────────────────
  # Job: Build & Obfuscate
  # ────────────────────────────────────────────────────────────────────────────
  build:
    name: 🏗️ Build
    needs: security-scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
      version:    ${{ steps.meta.outputs.version }}
      build_date: ${{ steps.meta.outputs.build_date }}
      cache_hit:  ${{ steps.cache.outputs.cache-hit }}

    steps:
      - uses: actions/checkout@v4

      - name: Generate build metadata
        id: meta
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)"       >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"   >> $GITHUB_OUTPUT
          echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - uses: pnpm/action-setup@v4
        with: { version: ${{ env.PNPM_VERSION }} }

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Compute cache key
        id: cache
        run: |
          HASH=$(find src-scripts scripts configs/master-rules.yaml -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          KEY=shadow-scripts-${{ runner.os }}-${{ steps.meta.outputs.version }}-${HASH}
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "Cache key: $KEY"

      - name: Restore cache
        uses: actions/cache@v4
        id: cache-restore
        if: ${{ !inputs.force_rebuild }}
        with:
          path: apps/loader/public
          key: ${{ steps.cache.outputs.key }}
          restore-keys: |
            shadow-scripts-${{ runner.os }}-${{ steps.meta.outputs.version }}-
            shadow-scripts-${{ runner.os }}-

      - name: Validate workspace
        run: |
          mkdir -p src-scripts apps/loader/public/{obfuscated,configs}
          [[ -f scripts/build-all.sh ]] && chmod +x scripts/build-all.sh || (echo "Missing build script" && exit 1)

      - name: Build & Obfuscate
        if: steps.cache-restore.outputs.cache-hit != 'true' || inputs.force_rebuild
        run: |
          ./scripts/build-all.sh $([[ inputs.debug_mode == 'true' ]] && echo "--debug")
          # inject build-info
          cat > apps/loader/public/build-info.json << EOF
          {
            "version": "${{ steps.meta.outputs.version }}",
            "commit": "${{ steps.meta.outputs.sha_short }}",
            "date": "${{ steps.meta.outputs.build_date }}",
            "env": "${{ inputs.environment }}"
          }
          EOF

      - name: Save cache
        if: steps.cache-restore.outputs.cache-hit != 'true' && github.event_name != 'pull_request'
        uses: actions/cache@v4
        with:
          path: apps/loader/public
          key: ${{ steps.cache.outputs.key }}

      - name: Verify build output
        run: |
          for f in index.html manifest.json; do
            [[ -f apps/loader/public/$f ]] || (echo "Missing $f" && exit 1)
          done
          echo "Found $(find apps/loader/public/obfuscated -name '*.js.b64' | wc -l) payloads"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/loader/public
          retention-days: ${{ env.CACHE_TTL_DAYS }}

      - name: Build summary
        run: |
          {
            echo "### 📊 Build Summary"
            echo "| Metric      | Value |"
            echo "| ----------- | ----- |"
            echo "| Version     | ${{ steps.meta.outputs.version }} |"
            echo "| Commit      | ${{ steps.meta.outputs.sha_short }} |"
            echo "| Cache hit   | ${{ steps.cache-restore.outputs.cache-hit }} |"
            echo "| Env         | ${{ inputs.environment }} |"
            echo "| Payloads    | $(find apps/loader/public/obfuscated -name '*.js.b64' | wc -l) |"
            echo "| Configs     | $(find apps/loader/public/configs -type f | wc -l) |"
            echo "| Total size  | $(du -sh apps/loader/public | cut -f1) |"
          } >> $GITHUB_STEP_SUMMARY

  # ────────────────────────────────────────────────────────────────────────────
  # Job: Commit artifacts back (main only)
  # ────────────────────────────────────────────────────────────────────────────
  post-build:
    name: 📝 Commit & Push Artifacts
    needs: build
    if: github.ref == 'refs/heads/main' && (needs.build.outputs.cache_hit != 'true' || inputs.force_rebuild)
    runs-on: ubuntu-latest
    permissions: contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/download-artifact@v4
        with: { name: github-pages, path: apps/loader/public }
      - name: Commit artifacts
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "Last updated: $(date -u)" > apps/loader/public/build-info.txt
          git add apps/loader/public
          if ! git diff --cached --quiet; then
            git commit -m "chore(build): artifacts for v${{ needs.build.outputs.version }} [skip ci]"
            git pull --rebase
            git push
          fi

  # ────────────────────────────────────────────────────────────────────────────
  # Job: Deploy to GitHub Pages
  # ────────────────────────────────────────────────────────────────────────────
  deploy:
    name: 🚀 Deploy to Pages
    needs: [build, post-build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment: github-pages
    steps:
      - uses: actions/deploy-pages@v4
        id: deployment
      - name: Discord notification
        if: env.DISCORD_WEBHOOK != ''
        run: |
          STATUS=$([[ "${{ needs.build.outputs.cache_hit }}" == 'true' ]] && echo "cached" || echo "rebuilt")
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"✅ Deployed (v${{ needs.build.outputs.version }} @ ${{ needs.build.outputs.sha_short }}) [${STATUS}] → ${{ steps.deployment.outputs.page_url }}\"}" \
               "${{ secrets.DISCORD_WEBHOOK }}"

  # ────────────────────────────────────────────────────────────────────────────
  # Job: Summary Report
  # ────────────────────────────────────────────────────────────────────────────
  report:
    name: 📊 Summary Report
    needs: [security-scan, build, post-build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Workflow summary
        run: |
          echo "# Shadow Scripts Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Post-build commit: ${{ needs.post-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Completed: $(date -u)" >> $GITHUB_STEP_SUMMARY
