# 🛠️ Enhanced Build, Test & Deploy Workflow for Shadow Scripts
# Comprehensive CI/CD pipeline with optimized caching, security checks, and observability
name: 🛠️ Build, Test & Deploy — Shadow Scripts

# --- Workflow Triggers ---
on:
  # Run on pushes to the 'main' branch if specific files have changed
  push:
    branches: [main]
    paths:
      - 'src-scripts/**'
      - 'scripts/**'
      - 'configs/master-rules.yaml'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/shadow-scripts.yml'
  # Pull request events for these same paths
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src-scripts/**'
      - 'scripts/**'
      - 'configs/master-rules.yaml'
      - 'package.json'
      - 'pnpm-lock.yaml'
  # Run on a schedule to ensure everything remains functional
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays at midnight UTC
  # Allow manual runs from the GitHub Actions UI with configuration options
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force a full rebuild and ignore the cache'
        type: boolean
        default: false
      environment:
        description: 'Target deployment environment'
        type: choice
        options:
          - production
          - staging
        default: 'production'
      debug_mode:
        description: 'Enable verbose logging'
        type: boolean
        default: false

# --- Concurrency Control ---
# Ensures only one workflow runs at a time for the same branch, canceling older runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# --- Environment Variables ---
# Centralized configuration available to all jobs
env:
  DNS_SERVER: "1.1.1.1"
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  NODE_OPTIONS: "--max-old-space-size=4096" # Increase Node.js memory limit
  PNPM_VERSION: "9.7.0"
  CACHE_TTL_DAYS: "7"
  LOG_LEVEL: ${{ inputs.debug_mode && 'debug' || 'info' }}
  REGISTRY_URL: "https://registry.npmjs.org/"
  # Using a static date format instead of the now() function
  BUILD_DATE: ${{ github.event.repository.updated_at || format('YYYY-MM-DD[T]HH:mm:ss[Z]', '2025-08-29T06:39:10Z') }}

# --- Jobs ---
jobs:
  # Job 1: Security scanning and code quality checks
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏗️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: 📝 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: 🔎 Check for secrets leaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE || '' }}
        continue-on-error: true

      - name: 📊 Generate security report
        run: |
          echo "### 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "* **CodeQL Analysis**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "* **Secret Scanning**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "* **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Job 2: Lint and audit code
  lint-and-audit:
    name: 🔍 Lint & Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: security-scan
    permissions:
      contents: read
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🛠️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🧹 Lint code
        run: |
          if [ -f "$(pnpm bin)/eslint" ]; then
            echo "::group::Running ESLint"
            pnpm lint || echo "Linting issues found"
            echo "::endgroup::"
          else
            echo "ESLint not found in project, skipping"
          fi
        continue-on-error: true
      
      - name: 🔒 Run dependency audit
        run: |
          echo "::group::Running npm audit"
          pnpm audit --audit-level=high
          echo "::endgroup::"
        continue-on-error: true
      
      - name: 📊 Generate audit report
        run: |
          echo "### 🔍 Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "* **Linting**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "* **Dependencies**: Audited" >> $GITHUB_STEP_SUMMARY
          echo "* **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Job 3: Build the project assets
  build:
    name: 🏗️ Build
    needs: [security-scan, lint-and-audit]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Grant only the permissions this job needs
    permissions:
      contents: read
      id-token: write # Needed for OIDC token generation
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
      cache_key: ${{ steps.cache_logic.outputs.key }}
      cache_hit: ${{ steps.cache_restore.outputs.cache-hit }}
      build_date: ${{ steps.vars.outputs.build_date }}
      version: ${{ steps.vars.outputs.version }}
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📝 Generate build metadata
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"
          if [ -f "package.json" ]; then
            echo "version=$(node -p "require('./package.json').version || '0.0.0'")" >> "$GITHUB_OUTPUT"
          else
            echo "version=0.0.0" >> "$GITHUB_OUTPUT"
          fi

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🛠️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: 📦 Install dependencies
        run: |
          echo "::group::Installing dependencies"
          pnpm install --frozen-lockfile --prefer-offline
          echo "::endgroup::"

      - name: 🧠 Define cache key
        id: cache_logic
        run: |
          # The key combines hashes of critical source files
          SOURCE_HASH=$(find src-scripts scripts configs/master-rules.yaml -type f -exec sha256sum {} \; 2>/dev/null | sort | sha256sum | cut -d' ' -f1)
          CACHE_KEY="build-artifacts-${{ runner.os }}-${{ steps.vars.outputs.version }}-${SOURCE_HASH}"
          echo "key=${CACHE_KEY}" >> "$GITHUB_OUTPUT"
          echo "Calculated cache key: ${CACHE_KEY}"

      - name: 🔍 Restore build cache
        id: cache_restore
        if: ${{ !inputs.force_rebuild }}
        uses: actions/cache/restore@v4
        with:
          path: apps/loader/public
          key: ${{ steps.cache_logic.outputs.key }}
          restore-keys: |
            build-artifacts-${{ runner.os }}-${{ steps.vars.outputs.version }}-
            build-artifacts-${{ runner.os }}-
          
      - name: 🔨 Obfuscate & Build artifacts
        # Run only if the cache was missed or a force rebuild was requested
        if: steps.cache_restore.outputs.cache-hit != 'true' || inputs.force_rebuild
        run: |
          echo "::group::Building artifacts"
          chmod +x scripts/build-all.sh
          ./scripts/build-all.sh ${{ inputs.debug_mode && '--debug' || '' }}
          echo "::endgroup::"
          
          # Generate build info file if not already created by build script
          if [ ! -f "apps/loader/public/build-info.json" ]; then
            cat > apps/loader/public/build-info.json << EOF
            {
              "version": "${{ steps.vars.outputs.version }}",
              "commit": "${{ steps.vars.outputs.sha_short }}",
              "buildDate": "${{ steps.vars.outputs.build_date }}",
              "environment": "${{ inputs.environment || 'production' }}"
            }
            EOF
          fi

      - name: 💾 Save build cache
        if: (steps.cache_restore.outputs.cache-hit != 'true' || inputs.force_rebuild) && github.event_name != 'pull_request'
        uses: actions/cache/save@v4
        with:
          path: apps/loader/public
          key: ${{ steps.cache_logic.outputs.key }}

      - name: 🧪 Verify build output
        run: |
          echo "::group::Validating build output"
          # Verify that essential files exist
          [ -d "apps/loader/public" ] || { echo "❌ Build directory missing"; exit 1; }
          [ -f "apps/loader/public/index.html" ] || { echo "❌ index.html missing"; exit 1; }
          [ -f "apps/loader/public/manifest.json" ] || { echo "❌ manifest.json missing"; exit 1; }
          
          # Check for empty files
          EMPTY_FILES=$(find apps/loader/public -type f -empty | wc -l)
          if [ "$EMPTY_FILES" -gt 0 ]; then
            echo "❌ Found empty files in build output"
            find apps/loader/public -type f -empty
            exit 1
          fi
          echo "✅ Build verification passed"
          echo "::endgroup::"

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/loader/public
          retention-days: ${{ env.CACHE_TTL_DAYS }}

      - name: 📊 Generate size report
        run: |
          echo "::group::Build size report"
          find apps/loader/public -type f -name "*.js" -o -name "*.css" | xargs du -ch | sort -h
          echo "::endgroup::"
          
          echo "### 📊 Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          find apps/loader/public -type f -name "*.js" -o -name "*.css" | xargs du -ch | sort -h >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          # Generate total size info
          TOTAL_SIZE=$(du -sh apps/loader/public | cut -f1)
          echo "**Total size:** ${TOTAL_SIZE}" >> $GITHUB_STEP_SUMMARY
          
          # Add metadata to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Info" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ steps.vars.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Commit:** ${{ steps.vars.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Build Date:** ${{ steps.vars.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Cache Hit:** ${{ steps.cache_restore.outputs.cache-hit == 'true' && 'Yes ✓' || 'No ✗' }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Post-build actions like committing artifacts
  post-build:
    name: 📝 Commit & Validate
    # This job runs only if the build job generated new artifacts on the main branch
    if: (needs.build.outputs.cache_hit != 'true' || inputs.force_rebuild) && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    # This job requires write permissions to push to the repository
    permissions:
      contents: write
      
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          # Ensure we have the full history for proper commits
          fetch-depth: 0

      - name: 📥 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: apps/loader/public
          
      - name: 🧪 Validate artifacts
        run: |
          echo "::group::Validating artifacts"
          [ -d apps/loader/public ] || { echo "❌ 'public' directory is missing!"; exit 1; }
          EMPTY_FILES=$(find apps/loader/public -type f -empty)
          if [[ -n "$EMPTY_FILES" ]]; then
            echo "❌ Found empty files in artifact:"
            echo "$EMPTY_FILES"
            exit 1
          fi
          echo "✅ Artifacts are valid."
          echo "::endgroup::"

      - name: 🤖 Commit and push artifacts
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add build-info.txt for backward compatibility if not already created
          if [ ! -f apps/loader/public/build-info.txt ]; then
            echo "Last updated: $(date -u --iso-8601=seconds)" > apps/loader/public/build-info.txt
            echo "Commit: ${{ needs.build.outputs.sha_short }}" >> apps/loader/public/build-info.txt
            echo "Version: ${{ needs.build.outputs.version }}" >> apps/loader/public/build-info.txt
          fi
          
          git add apps/loader/public/
          
          if ! git diff --cached --quiet; then
            git commit -m "chore(build): Generate artifacts for v${{ needs.build.outputs.version }} [skip ci]" \
                       -m "Source commit: ${{ needs.build.outputs.sha_short }}" \
                       -m "Build date: ${{ needs.build.outputs.build_date }}"
            
            # Pull with rebase to avoid merge conflicts
            git pull --rebase
            git push
            echo "✅ Successfully committed and pushed artifacts."
          else
            echo "ℹ️ No changes to commit."
          fi

      - name: 📋 Update commit summary
        run: |
          echo "### 🔄 Artifact Commit" >> $GITHUB_STEP_SUMMARY
          echo "* **Status:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Commit:** ${{ needs.build.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Files Updated:** $(git show --format='' --name-only | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deploy the built assets to GitHub Pages
  deploy:
    name: 🚀 Deploy
    # This job runs after the build job and only on the main branch
    if: github.ref == 'refs/heads/main'
    needs: [build, post-build]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # Grant only the permissions required for deployment
    permissions:
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📋 Deployment summary
        run: |
          echo "### 🚀 Deploying build ${{ needs.build.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Build Date:** ${{ needs.build.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Cache Status:** ${{ needs.build.outputs.cache_hit == 'true' && '✅ Used cached build' || '🔄 Fresh build' }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Environment:** ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000  # 10 minutes in milliseconds

      - name: 📢 Send Discord notification
        if: success() && env.DISCORD_WEBHOOK != ''
        run: |
          CACHE_STATUS=$([[ "${{ needs.build.outputs.cache_hit }}" == 'true' ]] && echo '(cached)' || echo '(rebuilt)')
          PAGE_URL="${{ steps.deployment.outputs.page_url }}"
          
          curl -H "Content-Type: application/json" -X POST \
            -d '{
              "embeds": [{
                "title": "✅ Shadow Scripts Deployment",
                "description": "Successfully deployed to GitHub Pages",
                "color": 5814783,
                "fields": [
                  {"name": "Version", "value": "${{ needs.build.outputs.version }}", "inline": true},
                  {"name": "Commit", "value": "${{ needs.build.outputs.sha_short }}", "inline": true},
                  {"name": "Status", "value": "'"${CACHE_STATUS}"'", "inline": true},
                  {"name": "URL", "value": "'"${PAGE_URL}"'", "inline": false}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' \
            "${DISCORD_WEBHOOK}" || echo "⚠️ Discord notification failed, but deployment succeeded."

      - name: 📝 Update deployment status
        run: |
          echo "### ✅ Deployment complete!" >> $GITHUB_STEP_SUMMARY
          echo "* **URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Job 6: Report workflow summary
  report:
    name: 📊 Summary Report
    if: always()
    needs: [security-scan, lint-and-audit, build, post-build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Generate workflow summary
        run: |
          echo "# 📑 Shadow Scripts Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security Scan Status
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "## 🔒 Security Scan: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔒 Security Scan: ⚠️ Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lint & Audit Status
          if [[ "${{ needs.lint-and-audit.result }}" == "success" ]]; then
            echo "## 🔍 Lint & Audit: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔍 Lint & Audit: ⚠️ Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build Status
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "## 🏗️ Build: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "* **Commit:** ${{ needs.build.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            CACHE_STATUS=$([[ "${{ needs.build.outputs.cache_hit }}" == 'true' ]] && echo '✅ Used cached build' || echo '🔄 Fresh build')
            echo "* **Cache:** ${CACHE_STATUS}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🏗️ Build: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Post-Build Status
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "## 📝 Commit: ⏭️ Skipped (not on main)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.post-build.result }}" == "success" ]]; then
            echo "## 📝 Commit: ✅ Artifacts saved" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 📝 Commit: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment Status
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "## 🚀 Deploy: ⏭️ Skipped (not on main)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "## 🚀 Deploy: ✅ Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "* **URL:** ${{ needs.deploy.outputs.page_url || 'Not available' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🚀 Deploy: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Workflow completed at: $(date -u)" >> $GITHUB_STEP_SUMMARY
